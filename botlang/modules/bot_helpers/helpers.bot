(module "bot-helpers"

    [define validate-rut
        (function (rut)
            [define rut-dv
                (split
                    (trim
                        (replace (lowercase rut) "." "")
                    )
                    "-"
                )
            ]
            [define rut-str (get rut-dv 0)]
            [define dv (get rut-dv 1)]
            [define sum-result
                (sum
                    (map
                        (function (tuple)
                            (*
                                (int (get tuple 1))
                                (+ (mod (get tuple 0) 6) 2)
                            )
                        )
                        (enumerate (reverse rut-str))
                    )
                )
            ]
            [define candidate (- 11 (mod sum-result 11))]
            [define computed-dv
                (cond
                    [(equal? candidate 11) "0"]
                    [(equal? candidate 10) "K"]
                    [else (str candidate)]
                )
            ]
            (equal? dv computed-dv)
        )
    ]

    [define ask-with-retries
        [function
            (
                data
                message
                validation-fun
                input-id
                next-node-fun
                max-retries
                retry-msg
                exit-result-fun
            )
            (define validate-input-node
                [bot-node (data)
                    (define to-validate [input-message])
                    (define is-valid? [validation-fun to-validate])
                    (if is-valid?
                        (next-node-fun (put data input-id to-validate))
                        (begin
                            (define counter (get data '__retries-counter))
                            (if (>= counter max-retries)
                                (exit-result-fun data)
                                (node-result
                                    (put data '__retries-counter (+ counter 1))
                                    retry-msg
                                    validate-input-node
                                )
                            )
                        )
                    )
                ]
            )
            (node-result
                (put data '__retries-counter 0)
                message
                validate-input-node
            )
        ]
    ]

    [define option
        (function (key description node)
            (list key description node)
        )
    ]

    [define in-options
        (function (options)
            (define simplified-options (map plain options))
            (function (option)
                (member? simplified-options option)
            )
        )
    ]

    [define node-selection
        [function
            (
                data
                message
                list-of-options
            )
            [define options-message
                (reduce
                    (fun (acc next) (append acc "\n" next))
                    (map
                        [fun (option)
                            (append
                                (str (get option 0))
                                ") "
                                (get option 1)
                            )
                        ]
                        list-of-options
                    )
                )
            ]
            [define failure-node
                (bot-node (data)
                    (node-result
                        data
                        (append
                            "Opci칩n inv치lida. Elija entre:\n\n"
                            options-message
                        )
                        selection-node
                    )
                )
            ]
            [define selection-node
                (bot-node (data)
                    [define input-option (input-message)]
                    [define find-fun
                        (fun (option) [equal? (str (get option 0)) input-option])
                    ]
                    [define selected-option (find find-fun list-of-options)]
                    (if (nil? selected-option)
                        (failure-node data)
                        ((get selected-option 2) data)
                    )
                )
            ]
            (node-result
                data
                (append message "\n\n" options-message)
                selection-node
            )
        ]
    ]

    [define node-yes-no
        [function
            (
                data
                initial-message
                choose-node-message
                yes-node
                no-node
            )
            [define choose-node-message (append choose-node-message " (si/no)")]
            [define selection-node
                (bot-node (data)
                    (if (equal? (plain [input-message]) "si")
                        (yes-node data)
                        (if (equal? (plain [input-message]) "no")
                            (no-node data)
                            (node-result
                                data
                                (append
                                    "Opci칩n inv치lida.\n\n"
                                    choose-node-message
                                )
                                selection-node
                            )
                        )
                    )
                )
            ]
            (node-result
                data
                (append
                    initial-message
                    "\n\n"
                    choose-node-message
                )
                selection-node
            )
        ]
    ]

    (provide
        validate-rut
        option
        ask-with-retries
        in-options
        node-selection
        node-yes-no
    )
)